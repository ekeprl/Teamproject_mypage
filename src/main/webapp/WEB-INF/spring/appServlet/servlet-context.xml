<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- 컨트롤러가 문자열(뷰이름)을 반환했을 때,
	TilesViewResolver가 먼저 뷰이름을 처리하고,
	TilesViewResolver가 처리할 수 없는경우 InternalResourceViewResolver가 처리하도록
	order속성을(순서) 설정 -->
	<beans:bean class="org.springframework.web.servlet.view.tiles3.TilesViewResolver">
		<beans:property name="order" value="1" />
	</beans:bean>
	<context:component-scan base-package="com.teamproject.teamapp" />
	
	
	<beans:bean class="org.springframework.web.servlet.view.tiles3.TilesViewResolver">
		<beans:property name="order" value="1" />
	</beans:bean>
	<context:component-scan base-package="com.exam.myapp" />
	<!-- 타일즈 설정 정보 등록(화면 정의 설정 파일 위치 지정) -->
	 <beans:bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
	   <beans:property name="definitions">
	     <beans:list>
	       <beans:value>/WEB-INF/views/tiles/tiles.xml</beans:value>
	     </beans:list>
	   </beans:property>
	 </beans:bean>
	
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- <resources mapping="/resources/**" location="/resources/" /> -->
	<!-- 스프링의 DipatcherServlet이 요청 경로에 맞는 핸들러를 찾지 못한 경우
	      그 요청을 처리할 디폴트 서블릿 핸들러를 등록
	     (디폴트서블릿핸들러는 요청 처리를 서버(톰캣)의 DefaultServlet에게 위임) -->
	<default-servlet-handler/>

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- jsp는 이경로 아래애 만든다. -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	     <!-- JSTL 메시지 관련 태그가 스프링의 메시지 소스를 사용하도록 지원해주는 JstlView 사용 -->
	    <beans:property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.teamproject.teamapp" />
	
	<!-- 인터셉터 등록 부분 -->
	<interceptors>
	   <interceptor>
	       <!-- 어떤 경로(주소)로 요청이 왔을 때 인터셉터를 실행할지 설정 -->
	       <mapping path="/**"/>
	       <exclude-mapping path=""/>
	       <!-- 인터셉터를 실행시키지 않을 경로 지정 -->
	       <exclude-mapping path="/member/login.do" />
	       <exclude-mapping path="/member/add.do" />
	       <!-- 실행할 인터셉터 클래스 등록 -->
	       <beans:bean class="com.teamproject.teamapp.member.LoginInterceptor"></beans:bean>
	   </interceptor>
	</interceptors>
	
	<!-- 데이터베이스 연결을 관리하는 커넥션풀로서 DBCP를 등록 -->
	<beans:bean id="ds" class="org.apache.commons.dbcp2.BasicDataSource">
	    <beans:property name="driverClassName" value="oracle.jdbc.OracleDriver" />
	    <beans:property name="url" value="jdbc:oracle:thin:@localhost:1521:xe" />
	    <beans:property name="username" value="web" />
	    <beans:property name="password" value="web01" />
	</beans:bean>
	
	<!-- MyBatis 본체를 등록 (커넥션을 제공하는 객체와 설정파일위치를 설정) -->
	<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
      <beans:property name="dataSource" ref="ds" />
      <beans:property name="configLocation" value="classpath:/mybatis/mybatis-config.xml" />
	</beans:bean>
	
	<!-- com.exam.exspring.member 패키지 아래에 존재하는
         @Mapper 애노테이션이 적용된 인터페이스를 찾아서, 마이바티스를 실행하는 그 인터페이스의 구현체를 자동 생성하여 스프링에 등록 -->
	<mybatis-spring:scan base-package="com.teamproject.teamapp" 
	    annotation="org.apache.ibatis.annotations.Mapper"/>
	    <!-- mybatis가 scan을 하기 위해 경로를 설정해준다. -->
	
	<interceptors>
		<interceptor>
			<mapping path="/**"/> 
			<exclude-mapping path="/member/login.do"/>  <!-- 로그인안해도 사용할 수 있도록 제외 -->
			<exclude-mapping path="/member/add.do"/>	<!-- 로그인안해도 사용할 수 있도록 제외 -->
			<exclude-mapping path="/member/check.do"/>	<!-- 로그인안해도 사용할 수 있도록 제외 -->
			<beans:bean class="com.teamproject.teamapp.member.LoginInterceptor"  /> <!-- 모든경로에대해 LoginInterceptor를 실행해라 -->
		</interceptor>
	</interceptors>
	
	
</beans:beans>
